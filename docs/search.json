[
  {
    "objectID": "STAT600_QuartoPres.html",
    "href": "STAT600_QuartoPres.html",
    "title": "A quick n’ dirty intro to Quarto",
    "section": "",
    "text": "This website was made to showcase different aspects of Quarto. While making it, I may have gotten a little carried away with all you can do. I got excited!"
  },
  {
    "objectID": "STAT600_QuartoPres.html#getting-started",
    "href": "STAT600_QuartoPres.html#getting-started",
    "title": "A quick n’ dirty intro to Quarto",
    "section": "Getting Started",
    "text": "Getting Started\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\nQuarto can render in real-time code written using VS Code, Jupyter, RStudio, Neovim, and (text) Editor. For this presentation, we’ll focus on how Quarto can improve our lives in RStudio.\nQuarto works by using knitr to execute your code chunks and create a markdown document (.md). This document is then processed by pandoc into your format of choice.\nStep 1: Download Quarto\nYou can find the link to download here: https://quarto.org/docs/get-started/\nStep 2: Choose your tool\nWe’ll be using Quarto in RStudio. Starting is as easy as opening RStudio and selecting “Quarto Document” or “Quarto Presentation,” depending on your preference, just as you would “R markdown.” The extension of the document will be “.qmd” rather than “.rmd”."
  },
  {
    "objectID": "STAT600_QuartoPres.html#aesthetics",
    "href": "STAT600_QuartoPres.html#aesthetics",
    "title": "A quick n’ dirty intro to Quarto",
    "section": "Aesthetics",
    "text": "Aesthetics\nQuarto allows you to toggle between your source code (nearly identical to a .rmd file) and a “visual” version of your rendered code. You’re able to edit both as you prefer. The application also allows you to integrate objects more easily into your documentation, providing a tool bar controlling font size, formatting, and more. You can add\n\nlinks (An educational tutorial with Prof Mine Cetinkaya-Rundel)\n\ncitations (Koslovsky et al. 2017)\n\nThese are especially cool because Quarto will generate a references.bib file for you. You can easily cite R packages, enter DOI’s to find papers, and add them all to your references.bib file as you do.\n\n\n\nDefinitions\n\nPretend this is a new word.\n\n\nmath equations \\[\\theta = \\text{Yes you can do this in .rmd but it generates the \\$ for you when you do it in Quarto}\\]\n\ncross references Figure 1\n\nIn order for this to work you must have “#| label: fig-” and “#| fig-cap:” in your code chunk.\n\n\n\netc. 🥰\neasily.\n\n\n\n\n\n\n\n\nYou can even use a “callout” to mark notes, tips, cautions, or warnings in your text."
  },
  {
    "objectID": "STAT600_QuartoPres.html#running-code",
    "href": "STAT600_QuartoPres.html#running-code",
    "title": "A quick n’ dirty intro to Quarto",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can create chunks as you would in .rmd, or select an Executable Cell from the “Insert” tab. Quarto can create executable cells in many languages, including RCpp.\nNote in this presentation, I added a “code-fold: true” beneath the “format: html:” in the YAML to hide the code.\nI also added “code-link: true”. This generates hyperlinks for all your commands, which can be a great resource for students following your code.\nIn your code chunk, you can still include output specifications (like “message = FALSE”) in the header as done in .rmd files, OR you can use “#|” to make adjustments to your output and figures.\n\nCodelibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(palmerpenguins)\nlibrary(gt)\n\n\nIn the code chunk below, I used\n#| warning: FALSE\n#| label: fig-my-chunk\n#| fig-cap: This is my figure caption.\n#| fig-cap-location: bottom\n#| fig-width: 5\n#| fig-asp: 0.618\n#| fig-alt: This text will appear when I select the attributes of my figure.\n\nCodeggplot(penguins,\n       aes(x = bill_length_mm,\n           y = bill_depth_mm,\n           color = species,\n           shape = species\n       )) +\n  geom_point() +\n  theme_minimal() +\n  scale_color_colorblind() +\n  labs(x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\")\n\n\n\nFigure 1: This is my figure caption.\n\n\n\nFor more on formatting figures and exploring formatting data frames, you can look here."
  },
  {
    "objectID": "STAT600_QuartoPres.html#presentations",
    "href": "STAT600_QuartoPres.html#presentations",
    "title": "A quick n’ dirty intro to Quarto",
    "section": "Presentations",
    "text": "Presentations\nIf you’d like to make a Quarto presentation instead, it’s fairly similar, where your headers will indicate new slides in the presentation. These titles are available to preview in your Outline to the right of the visual editor.\nYou can edit the “|# output-location:” in the code chunk to format your figures with your codes on the slides, or use “|# output-location: slide” to have your figure appear on the slide following the code.\nIf your code/text is too large for your slide, you can use the Outline to access the chunk attributes and adjust text size, too. Or, text color. That’s how I made this chunk blue!"
  },
  {
    "objectID": "STAT600_QuartoPres.html#websites",
    "href": "STAT600_QuartoPres.html#websites",
    "title": "A quick n’ dirty intro to Quarto",
    "section": "Websites",
    "text": "Websites\nTo create a website like this one:\n\nCreate a .qmd file. Or two, or three. As many as you’d like!\nIn RStudio, open a “Text File” in your project.\nSave this file as “_quarto.yml”\n\nIn it, include something like this:\nproject:\ntype: website\nwebsite:\ntitle: “How Cool is This”\nnavbar:\nleft: - STAT600_QuartoPres.qmd\n\nFor_Funsies.qmd\n\n\nQuarto will generate things like “project” and “website” once you start typing them.\nHere, I’ve put the navigation bar for my website on the left, and I’ve indicated which .qmd files in my project I’d like included in the navigation bar on my website.\n\n\nRe-load your project in RStudio.\nYou should now have a “Build” tab next to your “Environment” and “History” (and other tabs). Under this, click “Render Project” to generate your website.\nNow, when you click the .html files in your project’s “site” folder, you should be able to view the file in your web browser."
  },
  {
    "objectID": "For_Funsies.html",
    "href": "For_Funsies.html",
    "title": "About",
    "section": "",
    "text": "Here’s a little bio about me."
  },
  {
    "objectID": "For_Funsies.html#imagine-im-making-a-website",
    "href": "For_Funsies.html#imagine-im-making-a-website",
    "title": "About",
    "section": "",
    "text": "Here’s a little bio about me."
  }
]